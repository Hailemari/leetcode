# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
        self.size = [1] * n 

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        rootX, rootY = self.find(x), self.find(y)
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
                self.size[rootX] += self.size[rootY]
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
                self.size[rootY] += self.size[rootX]
            else:
                self.parent[rootY] = rootX
                self.size[rootX] += self.size[rootY]
                self.rank[rootX] += 1

    def component_size(self, x):
        return self.size[self.find(x)]


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    uf.union(i, j)
        
        malware_count = [0] * n
        for node in initial:
            root = uf.find(node)
            malware_count[root] += 1
        
        min_node = -1
        max_saved = -1
        

        for node in sorted(initial):
            root = uf.find(node)
            if malware_count[root] == 1: 
                size_of_component = uf.component_size(root)
                if size_of_component > max_saved or (size_of_component == max_saved and node < min_node):
                    max_saved = size_of_component
                    min_node = node
        
        if min_node == -1:
            min_node = min(initial)
        
        return min_node
