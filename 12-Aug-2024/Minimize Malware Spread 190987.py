# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

from typing import List
from collections import deque

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def bfs(start, infected):
            queue = deque([start])
            visited = set([start])
            
            while queue:
                node = queue.popleft()
                for neighbor in range(len(graph)):
                    if graph[node][neighbor] == 1 and neighbor not in visited and neighbor not in infected:
                        visited.add(neighbor)
                        queue.append(neighbor)
            
            return visited

        def count_infected(removed_node):
            infected = set(initial) - {removed_node}
            total_infected = set(infected)
            
            for node in infected:
                total_infected |= bfs(node, infected)
            
            return len(total_infected)

        min_infected = float('inf')
        min_node = float('inf')

        for node in initial:
            infected_count = count_infected(node)
            if infected_count < min_infected or (infected_count == min_infected and node < min_node):
                min_infected = infected_count
                min_node = node

        return min_node